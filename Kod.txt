section	.text
global _start 

;DONT USE
convert_number_to_string:
  mov byte [buffer+9],0  
  lea esi,[buffer+9]
  mov ebx,10 
convert_number_to_string_loop:
  xor edx,edx           
  div ebx               
  add dl,'0'            
  dec esi               
  mov [esi],dl
  test eax,eax
  jnz convert_number_to_string_loop    
  mov eax,esi
  ret
  
;USE
print_number:     ;movzx eax,byte[NUMBER]  
    call convert_number_to_string
    mov	edx, 10   
    mov	ecx, buffer    
    mov	ebx, 1	    
    mov	eax, 4	    
    int	0x80    
    mov byte[buffer+0],""
    mov byte[buffer+1],""
    mov byte[buffer+2],""
    mov byte[buffer+3],""
    mov byte[buffer+4],""
    mov byte[buffer+5],""
    mov byte[buffer+6],""
    mov byte[buffer+7],""
    mov byte[buffer+8],""
    mov byte[buffer+9],""
    ret
 
print_string:    ;mov ecx,STRING  ;mov edx,LENGTH  (STRING must be declared in .data by STRING db "lol" , LENGTH must be declared in .data by LENGTH equ $-STRING)
    mov	ebx, 1	    
    mov	eax, 4	    
    int	0x80        
    ret
    
print_new_line:
    mov	ecx,new_line 
    mov edx,1
    mov	ebx, 1	    
    mov	eax, 4	    
    int	0x80        
    ret
 
_start:
    
    movzx eax,byte[result]
    call print_number
    
    
    mov	eax, 1	   
    int	0x80     




section	.data
buffer resb 10
new_line db "",10

string db "text"
length equ $-string


x db 3
y db 5
result db 255



